import config
import numpy as np
import matplotlib.pyplot as plt

def mute_ramp (data):
    list_to_analyze=[]
    data_1=[]
    data_2=[]

    for i,j in enumerate(data):
        list_to_analyze.extend(data[i][0])
        if i<=4 :
            data_1.append(data[i][1])
        if i>= len(data)-5:
            data_2.append(data[i][1])
    # print(list_to_analyze)
    # plt.plot(list_to_analyze)
    # plt.title('mute ramp sample to analyze')
    # plt.show()
    mediana=[np.median(data_1),np.median(data_2)]
    # print(data_1)
    # print(data_2)
    if mediana[0]==0 and mediana[1]==0:
        maksimumums = []
        list_to_analyze = [list_to_analyze[i * 100:(i + 1) * 100] for i in range(int(len(list_to_analyze) / 100))]
        for i in list_to_analyze:
            maksimumums.append(np.amax(i))
        config.__mute_ramp_result__.insert(0,[fallingramp(maksimumums),raisingramp(maksimumums)])
        try:
            config.__mute_ramp_result__.pop(1)
        except IndexError:
            return-1
    if mediana[0]==0 and mediana[1]==-1:
        maksimumums = []
        list_to_analyze = [list_to_analyze[i * 100:(i + 1) * 100] for i in range(int(len(list_to_analyze) / 100))]
        for i in list_to_analyze:
            maksimumums.append(np.amax(i))
        config.__mute_ramp_result__.insert(0,fallingramp(maksimumums))
        try:
            config.__mute_ramp_result__.pop(1)
        except IndexError:
            return -1
    if mediana[0]==-1 and mediana[1]==0:
        maksimumums = []
        list_to_analyze = [list_to_analyze[i * 100:(i + 1) * 100] for i in range(int(len(list_to_analyze) / 100))]
        for i in list_to_analyze:
            maksimumums.append(np.amax(i))
        config.__mute_ramp_result__.insert(0,raisingramp(maksimumums))
        try:
            config.__mute_ramp_result__.pop(1)
        except IndexError:
            return -1
    if mediana[0] == -1 and mediana[1] == -1:
        return -3

    return-1

def fallingramp(data):
    counter = 0
    # plt.plot(data)
    # plt.title('failing ramp')
    # plt.show()
    for i, j in enumerate(data):
        if i == 0:
            temp = j
        elif j < temp:
            slope = -1
            temp = j
            counter = counter + 1
        elif j<50:
            return ("Falling ramp: {} ms ").format(
                int(counter * 100 / 44100 * 1000))  # *1000 to convert from sec to ms.
        else:
            if counter > 10:
                continue
            slope = 1
            counter = 0



def raisingramp(data):
    data = data[::-1]
    securitycounter = 0
    counter = 0
    # plt.plot(data)
    # plt.title('raising ramp')
    # plt.show()
    for i, j in enumerate(data):
        if i == 0:
            temp = j
        elif j < temp:
            slope = -1
            temp = j
            counter = counter + 1
        else:
            securitycounter = securitycounter + 1
            if securitycounter == 4:
                if counter > 10:
                    break
                slope = 1
                counter = 0
    return ("Raising ramp: {} ms ").format(int(counter * 100 / 44100 * 1000))  # *1000 to convert from sec to ms.
