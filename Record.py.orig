import pyaudio
import struct
import config
import Audio_level
import Audio_mute
import Sampling_Audio
import wave
from datetime import datetime
def Record (in_value,duration=0,path=''):
    bits = 16
    fs = 44100
    chunk = 11025 # 0,5 sec
    channels = 1
    #chunk = 1024  # Record in chunks of 1024 samples
    if bits == 16:
        sample_format = pyaudio.paInt16  # 16 bits per sample
    elif bits == 24:
        sample_format = pyaudio.paInt24  # 24 bits per sample
    elif bits == 32:
        sample_format = pyaudio.paInt32  # 32 bits per sample
    elif bits == 8:
        sample_format = pyaudio.paInt8  # 8 bits per sample
    else:
        return "Wrong bits it can be: 8, 16, 24, 32"
    if channels > 2:
        return "Wrong channels it can be: 1, 2"

    if in_value == '1':
        p = pyaudio.PyAudio()  # Create an interface to PortAudio

        def callback(in_data, frame_count, time_info, status):
            if config.beg_counter==0:
                config.beg_counter=1
                return (in_data,0)
            config.A_cut=struct.unpack("%dh"%(len(in_data)/2),in_data)
            Sampling_Audio.Sampling_Audio(config.A_cut, chunk)
            pyaudio.paContinue
            print((Audio_level.Audio_level()), ', '.join(Audio_mute.Audio_mute()))
            ret = config.__mute_ramp_result__
            if len(ret) !=0:
                print( ', '.join(ret))
            return (in_data,0)

        config.stream = p.open(format=sample_format,
                               channels=channels,
                               rate=fs,
                               frames_per_buffer=chunk,# bylo chunk - fs give 1 sec iteration between print of audio lvl on live signal
                               input=True,
                               stream_callback=callback)
        config.stream.start_stream()

        return 0

    elif in_value=='2':
        counter=duration/2
        chunk=44100
        __data_container__=[]
        p = pyaudio.PyAudio()
        config.stream = p.open(format=sample_format,
                                   channels=channels,
                                   rate=fs,
                                   frames_per_buffer=chunk,# bylo chunk - fs give 1 sec iteration between print of audio lvl on live signal
                                   input=True)
        config.stream.start_stream()

        while config.stream.is_active():
            lenght=len(__data_container__)
            if config.stop_request==1:
                counter-=1
                if counter ==0:
                    config.stream.stop_stream()
                    config.stream.close()
                    break
                if lenght<duration:
                    __data_container__.append(config.stream.read(chunk))
                else:
                    __data_container__.pop(0)
                    __data_container__.append(config.stream.read(chunk))
            elif lenght<duration:
                __data_container__.append(config.stream.read(chunk))
            elif lenght==duration:
                __data_container__.append(config.stream.read(chunk))
                __data_container__.pop(0)
        filename='{}/{:%Y-%m-%d__%H-%M-%S}.wav'.format(path,datetime.today())
        print(filename)
        wf = wave.open(filename, 'wb')
        wf.setnchannels(channels)
        wf.setsampwidth(p.get_sample_size(sample_format))
        wf.setframerate(fs)
        for i,j in enumerate(__data_container__):
            wf.writeframes(j)
        wf.close()
        return

